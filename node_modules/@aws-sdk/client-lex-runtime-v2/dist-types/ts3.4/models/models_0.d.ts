import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StreamingBlobTypes } from "@smithy/types";
import { LexRuntimeV2ServiceException as __BaseException } from "./LexRuntimeV2ServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface ActiveContextTimeToLive {
  timeToLiveInSeconds: number | undefined;
  turnsToLive: number | undefined;
}
export interface ActiveContext {
  name: string | undefined;
  timeToLive: ActiveContextTimeToLive | undefined;
  contextAttributes: Record<string, string> | undefined;
}
export interface AudioInputEvent {
  audioChunk?: Uint8Array;
  contentType: string | undefined;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface AudioResponseEvent {
  audioChunk?: Uint8Array;
  contentType?: string;
  eventId?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeleteSessionRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
}
export interface DeleteSessionResponse {
  botId?: string;
  botAliasId?: string;
  localeId?: string;
  sessionId?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface GetSessionRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
}
export declare const ConfirmationState: {
  readonly CONFIRMED: "Confirmed";
  readonly DENIED: "Denied";
  readonly NONE: "None";
};
export type ConfirmationState =
  (typeof ConfirmationState)[keyof typeof ConfirmationState];
export declare const Shape: {
  readonly COMPOSITE: "Composite";
  readonly LIST: "List";
  readonly SCALAR: "Scalar";
};
export type Shape = (typeof Shape)[keyof typeof Shape];
export interface Value {
  originalValue?: string;
  interpretedValue: string | undefined;
  resolvedValues?: string[];
}
export declare const IntentState: {
  readonly FAILED: "Failed";
  readonly FULFILLED: "Fulfilled";
  readonly FULFILLMENT_IN_PROGRESS: "FulfillmentInProgress";
  readonly IN_PROGRESS: "InProgress";
  readonly READY_FOR_FULFILLMENT: "ReadyForFulfillment";
  readonly WAITING: "Waiting";
};
export type IntentState = (typeof IntentState)[keyof typeof IntentState];
export interface ConfidenceScore {
  score?: number;
}
export declare const SentimentType: {
  readonly MIXED: "MIXED";
  readonly NEGATIVE: "NEGATIVE";
  readonly NEUTRAL: "NEUTRAL";
  readonly POSITIVE: "POSITIVE";
};
export type SentimentType = (typeof SentimentType)[keyof typeof SentimentType];
export interface SentimentScore {
  positive?: number;
  negative?: number;
  neutral?: number;
  mixed?: number;
}
export interface SentimentResponse {
  sentiment?: SentimentType;
  sentimentScore?: SentimentScore;
}
export declare const MessageContentType: {
  readonly CUSTOM_PAYLOAD: "CustomPayload";
  readonly IMAGE_RESPONSE_CARD: "ImageResponseCard";
  readonly PLAIN_TEXT: "PlainText";
  readonly SSML: "SSML";
};
export type MessageContentType =
  (typeof MessageContentType)[keyof typeof MessageContentType];
export interface Button {
  text: string | undefined;
  value: string | undefined;
}
export interface ImageResponseCard {
  title: string | undefined;
  subtitle?: string;
  imageUrl?: string;
  buttons?: Button[];
}
export interface Message {
  content?: string;
  contentType: MessageContentType | undefined;
  imageResponseCard?: ImageResponseCard;
}
export declare const StyleType: {
  readonly DEFAULT: "Default";
  readonly SPELL_BY_LETTER: "SpellByLetter";
  readonly SPELL_BY_WORD: "SpellByWord";
};
export type StyleType = (typeof StyleType)[keyof typeof StyleType];
export declare const DialogActionType: {
  readonly CLOSE: "Close";
  readonly CONFIRM_INTENT: "ConfirmIntent";
  readonly DELEGATE: "Delegate";
  readonly ELICIT_INTENT: "ElicitIntent";
  readonly ELICIT_SLOT: "ElicitSlot";
  readonly NONE: "None";
};
export type DialogActionType =
  (typeof DialogActionType)[keyof typeof DialogActionType];
export interface RuntimeHintValue {
  phrase: string | undefined;
}
export declare class BadGatewayException extends __BaseException {
  readonly name: "BadGatewayException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<BadGatewayException, __BaseException>
  );
}
export declare class DependencyFailedException extends __BaseException {
  readonly name: "DependencyFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DependencyFailedException, __BaseException>
  );
}
export interface PutSessionResponse {
  contentType?: string;
  messages?: string;
  sessionState?: string;
  requestAttributes?: string;
  sessionId?: string;
  audioStream?: StreamingBlobTypes;
}
export interface RecognizedBotMember {
  botId: string | undefined;
  botName?: string;
}
export interface RecognizeUtteranceRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  sessionState?: string;
  requestAttributes?: string;
  requestContentType: string | undefined;
  responseContentType?: string;
  inputStream?: StreamingBlobTypes;
}
export interface RecognizeUtteranceResponse {
  inputMode?: string;
  contentType?: string;
  messages?: string;
  interpretations?: string;
  sessionState?: string;
  requestAttributes?: string;
  sessionId?: string;
  inputTranscript?: string;
  audioStream?: StreamingBlobTypes;
  recognizedBotMember?: string;
}
export declare const ConversationMode: {
  readonly AUDIO: "AUDIO";
  readonly TEXT: "TEXT";
};
export type ConversationMode =
  (typeof ConversationMode)[keyof typeof ConversationMode];
export interface DisconnectionEvent {
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface DTMFInputEvent {
  inputCharacter: string | undefined;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface PlaybackCompletionEvent {
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface TextInputEvent {
  text: string | undefined;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface HeartbeatEvent {
  eventId?: string;
}
export declare const InputMode: {
  readonly DTMF: "DTMF";
  readonly SPEECH: "Speech";
  readonly TEXT: "Text";
};
export type InputMode = (typeof InputMode)[keyof typeof InputMode];
export declare const PlaybackInterruptionReason: {
  readonly DTMF_START_DETECTED: "DTMF_START_DETECTED";
  readonly TEXT_DETECTED: "TEXT_DETECTED";
  readonly VOICE_START_DETECTED: "VOICE_START_DETECTED";
};
export type PlaybackInterruptionReason =
  (typeof PlaybackInterruptionReason)[keyof typeof PlaybackInterruptionReason];
export interface PlaybackInterruptionEvent {
  eventReason?: PlaybackInterruptionReason;
  causedByEventId?: string;
  eventId?: string;
}
export interface TextResponseEvent {
  messages?: Message[];
  eventId?: string;
}
export interface TranscriptEvent {
  transcript?: string;
  eventId?: string;
}
export interface ElicitSubSlot {
  name: string | undefined;
  subSlotToElicit?: ElicitSubSlot;
}
export interface DialogAction {
  type: DialogActionType | undefined;
  slotToElicit?: string;
  slotElicitationStyle?: StyleType;
  subSlotToElicit?: ElicitSubSlot;
}
export interface RuntimeHintDetails {
  runtimeHintValues?: RuntimeHintValue[];
  subSlotHints?: Record<string, RuntimeHintDetails>;
}
export interface RuntimeHints {
  slotHints?: Record<string, Record<string, RuntimeHintDetails>>;
}
export interface Slot {
  value?: Value;
  shape?: Shape;
  values?: Slot[];
  subSlots?: Record<string, Slot>;
}
export interface Intent {
  name: string | undefined;
  slots?: Record<string, Slot>;
  state?: IntentState;
  confirmationState?: ConfirmationState;
}
export interface Interpretation {
  nluConfidence?: ConfidenceScore;
  sentimentResponse?: SentimentResponse;
  intent?: Intent;
}
export interface SessionState {
  dialogAction?: DialogAction;
  intent?: Intent;
  activeContexts?: ActiveContext[];
  sessionAttributes?: Record<string, string>;
  originatingRequestId?: string;
  runtimeHints?: RuntimeHints;
}
export interface ConfigurationEvent {
  requestAttributes?: Record<string, string>;
  responseContentType: string | undefined;
  sessionState?: SessionState;
  welcomeMessages?: Message[];
  disablePlayback?: boolean;
  eventId?: string;
  clientTimestampMillis?: number;
}
export interface PutSessionRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  messages?: Message[];
  sessionState: SessionState | undefined;
  requestAttributes?: Record<string, string>;
  responseContentType?: string;
}
export interface RecognizeTextRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  text: string | undefined;
  sessionState?: SessionState;
  requestAttributes?: Record<string, string>;
}
export type StartConversationRequestEventStream =
  | StartConversationRequestEventStream.AudioInputEventMember
  | StartConversationRequestEventStream.ConfigurationEventMember
  | StartConversationRequestEventStream.DTMFInputEventMember
  | StartConversationRequestEventStream.DisconnectionEventMember
  | StartConversationRequestEventStream.PlaybackCompletionEventMember
  | StartConversationRequestEventStream.TextInputEventMember
  | StartConversationRequestEventStream.$UnknownMember;
export declare namespace StartConversationRequestEventStream {
  interface ConfigurationEventMember {
    ConfigurationEvent: ConfigurationEvent;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface AudioInputEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent: AudioInputEvent;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface DTMFInputEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent: DTMFInputEvent;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface TextInputEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent: TextInputEvent;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface PlaybackCompletionEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent: PlaybackCompletionEvent;
    DisconnectionEvent?: never;
    $unknown?: never;
  }
  interface DisconnectionEventMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent: DisconnectionEvent;
    $unknown?: never;
  }
  interface $UnknownMember {
    ConfigurationEvent?: never;
    AudioInputEvent?: never;
    DTMFInputEvent?: never;
    TextInputEvent?: never;
    PlaybackCompletionEvent?: never;
    DisconnectionEvent?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ConfigurationEvent: (value: ConfigurationEvent) => T;
    AudioInputEvent: (value: AudioInputEvent) => T;
    DTMFInputEvent: (value: DTMFInputEvent) => T;
    TextInputEvent: (value: TextInputEvent) => T;
    PlaybackCompletionEvent: (value: PlaybackCompletionEvent) => T;
    DisconnectionEvent: (value: DisconnectionEvent) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StartConversationRequestEventStream,
    visitor: Visitor<T>
  ) => T;
}
export interface StartConversationRequest {
  botId: string | undefined;
  botAliasId: string | undefined;
  localeId: string | undefined;
  sessionId: string | undefined;
  conversationMode?: ConversationMode;
  requestEventStream:
    | AsyncIterable<StartConversationRequestEventStream>
    | undefined;
}
export interface GetSessionResponse {
  sessionId?: string;
  messages?: Message[];
  interpretations?: Interpretation[];
  sessionState?: SessionState;
}
export interface IntentResultEvent {
  inputMode?: InputMode;
  interpretations?: Interpretation[];
  sessionState?: SessionState;
  requestAttributes?: Record<string, string>;
  sessionId?: string;
  eventId?: string;
  recognizedBotMember?: RecognizedBotMember;
}
export interface RecognizeTextResponse {
  messages?: Message[];
  sessionState?: SessionState;
  interpretations?: Interpretation[];
  requestAttributes?: Record<string, string>;
  sessionId?: string;
  recognizedBotMember?: RecognizedBotMember;
}
export type StartConversationResponseEventStream =
  | StartConversationResponseEventStream.AccessDeniedExceptionMember
  | StartConversationResponseEventStream.AudioResponseEventMember
  | StartConversationResponseEventStream.BadGatewayExceptionMember
  | StartConversationResponseEventStream.ConflictExceptionMember
  | StartConversationResponseEventStream.DependencyFailedExceptionMember
  | StartConversationResponseEventStream.HeartbeatEventMember
  | StartConversationResponseEventStream.IntentResultEventMember
  | StartConversationResponseEventStream.InternalServerExceptionMember
  | StartConversationResponseEventStream.PlaybackInterruptionEventMember
  | StartConversationResponseEventStream.ResourceNotFoundExceptionMember
  | StartConversationResponseEventStream.TextResponseEventMember
  | StartConversationResponseEventStream.ThrottlingExceptionMember
  | StartConversationResponseEventStream.TranscriptEventMember
  | StartConversationResponseEventStream.ValidationExceptionMember
  | StartConversationResponseEventStream.$UnknownMember;
export declare namespace StartConversationResponseEventStream {
  interface PlaybackInterruptionEventMember {
    PlaybackInterruptionEvent: PlaybackInterruptionEvent;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface TranscriptEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent: TranscriptEvent;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface IntentResultEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent: IntentResultEvent;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface TextResponseEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent: TextResponseEvent;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface AudioResponseEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent: AudioResponseEvent;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface HeartbeatEventMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent: HeartbeatEvent;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface AccessDeniedExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException: AccessDeniedException;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ResourceNotFoundExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException: ResourceNotFoundException;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ValidationExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException: ValidationException;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ThrottlingExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException: ThrottlingException;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface InternalServerExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException: InternalServerException;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface ConflictExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException: ConflictException;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface DependencyFailedExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException: DependencyFailedException;
    BadGatewayException?: never;
    $unknown?: never;
  }
  interface BadGatewayExceptionMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException: BadGatewayException;
    $unknown?: never;
  }
  interface $UnknownMember {
    PlaybackInterruptionEvent?: never;
    TranscriptEvent?: never;
    IntentResultEvent?: never;
    TextResponseEvent?: never;
    AudioResponseEvent?: never;
    HeartbeatEvent?: never;
    AccessDeniedException?: never;
    ResourceNotFoundException?: never;
    ValidationException?: never;
    ThrottlingException?: never;
    InternalServerException?: never;
    ConflictException?: never;
    DependencyFailedException?: never;
    BadGatewayException?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    PlaybackInterruptionEvent: (value: PlaybackInterruptionEvent) => T;
    TranscriptEvent: (value: TranscriptEvent) => T;
    IntentResultEvent: (value: IntentResultEvent) => T;
    TextResponseEvent: (value: TextResponseEvent) => T;
    AudioResponseEvent: (value: AudioResponseEvent) => T;
    HeartbeatEvent: (value: HeartbeatEvent) => T;
    AccessDeniedException: (value: AccessDeniedException) => T;
    ResourceNotFoundException: (value: ResourceNotFoundException) => T;
    ValidationException: (value: ValidationException) => T;
    ThrottlingException: (value: ThrottlingException) => T;
    InternalServerException: (value: InternalServerException) => T;
    ConflictException: (value: ConflictException) => T;
    DependencyFailedException: (value: DependencyFailedException) => T;
    BadGatewayException: (value: BadGatewayException) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StartConversationResponseEventStream,
    visitor: Visitor<T>
  ) => T;
}
export interface StartConversationResponse {
  responseEventStream?: AsyncIterable<StartConversationResponseEventStream>;
}
export declare const ActiveContextFilterSensitiveLog: (
  obj: ActiveContext
) => any;
export declare const MessageFilterSensitiveLog: (obj: Message) => any;
export declare const PutSessionResponseFilterSensitiveLog: (
  obj: PutSessionResponse
) => any;
export declare const RecognizeUtteranceRequestFilterSensitiveLog: (
  obj: RecognizeUtteranceRequest
) => any;
export declare const RecognizeUtteranceResponseFilterSensitiveLog: (
  obj: RecognizeUtteranceResponse
) => any;
export declare const DTMFInputEventFilterSensitiveLog: (
  obj: DTMFInputEvent
) => any;
export declare const TextInputEventFilterSensitiveLog: (
  obj: TextInputEvent
) => any;
export declare const TextResponseEventFilterSensitiveLog: (
  obj: TextResponseEvent
) => any;
export declare const SessionStateFilterSensitiveLog: (obj: SessionState) => any;
export declare const ConfigurationEventFilterSensitiveLog: (
  obj: ConfigurationEvent
) => any;
export declare const PutSessionRequestFilterSensitiveLog: (
  obj: PutSessionRequest
) => any;
export declare const RecognizeTextRequestFilterSensitiveLog: (
  obj: RecognizeTextRequest
) => any;
export declare const StartConversationRequestEventStreamFilterSensitiveLog: (
  obj: StartConversationRequestEventStream
) => any;
export declare const StartConversationRequestFilterSensitiveLog: (
  obj: StartConversationRequest
) => any;
export declare const GetSessionResponseFilterSensitiveLog: (
  obj: GetSessionResponse
) => any;
export declare const IntentResultEventFilterSensitiveLog: (
  obj: IntentResultEvent
) => any;
export declare const RecognizeTextResponseFilterSensitiveLog: (
  obj: RecognizeTextResponse
) => any;
export declare const StartConversationResponseEventStreamFilterSensitiveLog: (
  obj: StartConversationResponseEventStream
) => any;
export declare const StartConversationResponseFilterSensitiveLog: (
  obj: StartConversationResponse
) => any;
