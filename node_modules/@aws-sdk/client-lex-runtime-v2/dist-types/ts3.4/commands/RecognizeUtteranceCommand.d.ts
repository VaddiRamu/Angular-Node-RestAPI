import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
  StreamingBlobPayloadInputTypes,
  StreamingBlobPayloadOutputTypes,
} from "@smithy/types";
import {
  LexRuntimeV2ClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../LexRuntimeV2Client";
import {
  RecognizeUtteranceRequest,
  RecognizeUtteranceResponse,
} from "../models/models_0";
export { __MetadataBearer, $Command };
export interface RecognizeUtteranceCommandInput
  extends Pick<
    RecognizeUtteranceRequest,
    Exclude<keyof RecognizeUtteranceRequest, "inputStream">
  > {
  inputStream?: StreamingBlobPayloadInputTypes;
}
export interface RecognizeUtteranceCommandOutput
  extends Pick<
      RecognizeUtteranceResponse,
      Exclude<keyof RecognizeUtteranceResponse, "audioStream">
    >,
    __MetadataBearer {
  audioStream?: StreamingBlobPayloadOutputTypes;
}
export declare class RecognizeUtteranceCommand extends $Command<
  RecognizeUtteranceCommandInput,
  RecognizeUtteranceCommandOutput,
  LexRuntimeV2ClientResolvedConfig
> {
  readonly input: RecognizeUtteranceCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: RecognizeUtteranceCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: LexRuntimeV2ClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<RecognizeUtteranceCommandInput, RecognizeUtteranceCommandOutput>;
  private serialize;
  private deserialize;
}
