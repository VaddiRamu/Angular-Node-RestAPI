"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartConversationResponseFilterSensitiveLog = exports.StartConversationResponseEventStreamFilterSensitiveLog = exports.RecognizeTextResponseFilterSensitiveLog = exports.IntentResultEventFilterSensitiveLog = exports.GetSessionResponseFilterSensitiveLog = exports.StartConversationRequestFilterSensitiveLog = exports.StartConversationRequestEventStreamFilterSensitiveLog = exports.RecognizeTextRequestFilterSensitiveLog = exports.PutSessionRequestFilterSensitiveLog = exports.ConfigurationEventFilterSensitiveLog = exports.SessionStateFilterSensitiveLog = exports.TextResponseEventFilterSensitiveLog = exports.TextInputEventFilterSensitiveLog = exports.DTMFInputEventFilterSensitiveLog = exports.RecognizeUtteranceResponseFilterSensitiveLog = exports.RecognizeUtteranceRequestFilterSensitiveLog = exports.PutSessionResponseFilterSensitiveLog = exports.MessageFilterSensitiveLog = exports.ActiveContextFilterSensitiveLog = exports.StartConversationResponseEventStream = exports.StartConversationRequestEventStream = exports.PlaybackInterruptionReason = exports.InputMode = exports.ConversationMode = exports.DependencyFailedException = exports.BadGatewayException = exports.DialogActionType = exports.StyleType = exports.MessageContentType = exports.SentimentType = exports.IntentState = exports.Shape = exports.ConfirmationState = exports.ValidationException = exports.ThrottlingException = exports.ResourceNotFoundException = exports.InternalServerException = exports.ConflictException = exports.AccessDeniedException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const LexRuntimeV2ServiceException_1 = require("./LexRuntimeV2ServiceException");
class AccessDeniedException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
exports.AccessDeniedException = AccessDeniedException;
class ConflictException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
exports.ConflictException = ConflictException;
class InternalServerException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
exports.InternalServerException = InternalServerException;
class ResourceNotFoundException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ThrottlingException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
exports.ThrottlingException = ThrottlingException;
class ValidationException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
exports.ValidationException = ValidationException;
exports.ConfirmationState = {
    CONFIRMED: "Confirmed",
    DENIED: "Denied",
    NONE: "None",
};
exports.Shape = {
    COMPOSITE: "Composite",
    LIST: "List",
    SCALAR: "Scalar",
};
exports.IntentState = {
    FAILED: "Failed",
    FULFILLED: "Fulfilled",
    FULFILLMENT_IN_PROGRESS: "FulfillmentInProgress",
    IN_PROGRESS: "InProgress",
    READY_FOR_FULFILLMENT: "ReadyForFulfillment",
    WAITING: "Waiting",
};
exports.SentimentType = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
exports.MessageContentType = {
    CUSTOM_PAYLOAD: "CustomPayload",
    IMAGE_RESPONSE_CARD: "ImageResponseCard",
    PLAIN_TEXT: "PlainText",
    SSML: "SSML",
};
exports.StyleType = {
    DEFAULT: "Default",
    SPELL_BY_LETTER: "SpellByLetter",
    SPELL_BY_WORD: "SpellByWord",
};
exports.DialogActionType = {
    CLOSE: "Close",
    CONFIRM_INTENT: "ConfirmIntent",
    DELEGATE: "Delegate",
    ELICIT_INTENT: "ElicitIntent",
    ELICIT_SLOT: "ElicitSlot",
    NONE: "None",
};
class BadGatewayException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "BadGatewayException",
            $fault: "server",
            ...opts,
        });
        this.name = "BadGatewayException";
        this.$fault = "server";
        Object.setPrototypeOf(this, BadGatewayException.prototype);
    }
}
exports.BadGatewayException = BadGatewayException;
class DependencyFailedException extends LexRuntimeV2ServiceException_1.LexRuntimeV2ServiceException {
    constructor(opts) {
        super({
            name: "DependencyFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DependencyFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DependencyFailedException.prototype);
    }
}
exports.DependencyFailedException = DependencyFailedException;
exports.ConversationMode = {
    AUDIO: "AUDIO",
    TEXT: "TEXT",
};
exports.InputMode = {
    DTMF: "DTMF",
    SPEECH: "Speech",
    TEXT: "Text",
};
exports.PlaybackInterruptionReason = {
    DTMF_START_DETECTED: "DTMF_START_DETECTED",
    TEXT_DETECTED: "TEXT_DETECTED",
    VOICE_START_DETECTED: "VOICE_START_DETECTED",
};
var StartConversationRequestEventStream;
(function (StartConversationRequestEventStream) {
    StartConversationRequestEventStream.visit = (value, visitor) => {
        if (value.ConfigurationEvent !== undefined)
            return visitor.ConfigurationEvent(value.ConfigurationEvent);
        if (value.AudioInputEvent !== undefined)
            return visitor.AudioInputEvent(value.AudioInputEvent);
        if (value.DTMFInputEvent !== undefined)
            return visitor.DTMFInputEvent(value.DTMFInputEvent);
        if (value.TextInputEvent !== undefined)
            return visitor.TextInputEvent(value.TextInputEvent);
        if (value.PlaybackCompletionEvent !== undefined)
            return visitor.PlaybackCompletionEvent(value.PlaybackCompletionEvent);
        if (value.DisconnectionEvent !== undefined)
            return visitor.DisconnectionEvent(value.DisconnectionEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(StartConversationRequestEventStream = exports.StartConversationRequestEventStream || (exports.StartConversationRequestEventStream = {}));
var StartConversationResponseEventStream;
(function (StartConversationResponseEventStream) {
    StartConversationResponseEventStream.visit = (value, visitor) => {
        if (value.PlaybackInterruptionEvent !== undefined)
            return visitor.PlaybackInterruptionEvent(value.PlaybackInterruptionEvent);
        if (value.TranscriptEvent !== undefined)
            return visitor.TranscriptEvent(value.TranscriptEvent);
        if (value.IntentResultEvent !== undefined)
            return visitor.IntentResultEvent(value.IntentResultEvent);
        if (value.TextResponseEvent !== undefined)
            return visitor.TextResponseEvent(value.TextResponseEvent);
        if (value.AudioResponseEvent !== undefined)
            return visitor.AudioResponseEvent(value.AudioResponseEvent);
        if (value.HeartbeatEvent !== undefined)
            return visitor.HeartbeatEvent(value.HeartbeatEvent);
        if (value.AccessDeniedException !== undefined)
            return visitor.AccessDeniedException(value.AccessDeniedException);
        if (value.ResourceNotFoundException !== undefined)
            return visitor.ResourceNotFoundException(value.ResourceNotFoundException);
        if (value.ValidationException !== undefined)
            return visitor.ValidationException(value.ValidationException);
        if (value.ThrottlingException !== undefined)
            return visitor.ThrottlingException(value.ThrottlingException);
        if (value.InternalServerException !== undefined)
            return visitor.InternalServerException(value.InternalServerException);
        if (value.ConflictException !== undefined)
            return visitor.ConflictException(value.ConflictException);
        if (value.DependencyFailedException !== undefined)
            return visitor.DependencyFailedException(value.DependencyFailedException);
        if (value.BadGatewayException !== undefined)
            return visitor.BadGatewayException(value.BadGatewayException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(StartConversationResponseEventStream = exports.StartConversationResponseEventStream || (exports.StartConversationResponseEventStream = {}));
const ActiveContextFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.contextAttributes && { contextAttributes: smithy_client_1.SENSITIVE_STRING }),
});
exports.ActiveContextFilterSensitiveLog = ActiveContextFilterSensitiveLog;
const MessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: smithy_client_1.SENSITIVE_STRING }),
});
exports.MessageFilterSensitiveLog = MessageFilterSensitiveLog;
const PutSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutSessionResponseFilterSensitiveLog = PutSessionResponseFilterSensitiveLog;
const RecognizeUtteranceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessionState && { sessionState: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.requestAttributes && { requestAttributes: smithy_client_1.SENSITIVE_STRING }),
});
exports.RecognizeUtteranceRequestFilterSensitiveLog = RecognizeUtteranceRequestFilterSensitiveLog;
const RecognizeUtteranceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RecognizeUtteranceResponseFilterSensitiveLog = RecognizeUtteranceResponseFilterSensitiveLog;
const DTMFInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputCharacter && { inputCharacter: smithy_client_1.SENSITIVE_STRING }),
});
exports.DTMFInputEventFilterSensitiveLog = DTMFInputEventFilterSensitiveLog;
const TextInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithy_client_1.SENSITIVE_STRING }),
});
exports.TextInputEventFilterSensitiveLog = TextInputEventFilterSensitiveLog;
const TextResponseEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => (0, exports.MessageFilterSensitiveLog)(item)) }),
});
exports.TextResponseEventFilterSensitiveLog = TextResponseEventFilterSensitiveLog;
const SessionStateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.activeContexts && {
        activeContexts: obj.activeContexts.map((item) => (0, exports.ActiveContextFilterSensitiveLog)(item)),
    }),
});
exports.SessionStateFilterSensitiveLog = SessionStateFilterSensitiveLog;
const ConfigurationEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.welcomeMessages && { welcomeMessages: obj.welcomeMessages.map((item) => (0, exports.MessageFilterSensitiveLog)(item)) }),
});
exports.ConfigurationEventFilterSensitiveLog = ConfigurationEventFilterSensitiveLog;
const PutSessionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => (0, exports.MessageFilterSensitiveLog)(item)) }),
});
exports.PutSessionRequestFilterSensitiveLog = PutSessionRequestFilterSensitiveLog;
const RecognizeTextRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithy_client_1.SENSITIVE_STRING }),
});
exports.RecognizeTextRequestFilterSensitiveLog = RecognizeTextRequestFilterSensitiveLog;
const StartConversationRequestEventStreamFilterSensitiveLog = (obj) => {
    if (obj.ConfigurationEvent !== undefined)
        return { ConfigurationEvent: (0, exports.ConfigurationEventFilterSensitiveLog)(obj.ConfigurationEvent) };
    if (obj.AudioInputEvent !== undefined)
        return { AudioInputEvent: obj.AudioInputEvent };
    if (obj.DTMFInputEvent !== undefined)
        return { DTMFInputEvent: (0, exports.DTMFInputEventFilterSensitiveLog)(obj.DTMFInputEvent) };
    if (obj.TextInputEvent !== undefined)
        return { TextInputEvent: (0, exports.TextInputEventFilterSensitiveLog)(obj.TextInputEvent) };
    if (obj.PlaybackCompletionEvent !== undefined)
        return { PlaybackCompletionEvent: obj.PlaybackCompletionEvent };
    if (obj.DisconnectionEvent !== undefined)
        return { DisconnectionEvent: obj.DisconnectionEvent };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.StartConversationRequestEventStreamFilterSensitiveLog = StartConversationRequestEventStreamFilterSensitiveLog;
const StartConversationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.requestEventStream && { requestEventStream: "STREAMING_CONTENT" }),
});
exports.StartConversationRequestFilterSensitiveLog = StartConversationRequestFilterSensitiveLog;
const GetSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => (0, exports.MessageFilterSensitiveLog)(item)) }),
});
exports.GetSessionResponseFilterSensitiveLog = GetSessionResponseFilterSensitiveLog;
const IntentResultEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.IntentResultEventFilterSensitiveLog = IntentResultEventFilterSensitiveLog;
const RecognizeTextResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => (0, exports.MessageFilterSensitiveLog)(item)) }),
});
exports.RecognizeTextResponseFilterSensitiveLog = RecognizeTextResponseFilterSensitiveLog;
const StartConversationResponseEventStreamFilterSensitiveLog = (obj) => {
    if (obj.PlaybackInterruptionEvent !== undefined)
        return { PlaybackInterruptionEvent: obj.PlaybackInterruptionEvent };
    if (obj.TranscriptEvent !== undefined)
        return { TranscriptEvent: obj.TranscriptEvent };
    if (obj.IntentResultEvent !== undefined)
        return { IntentResultEvent: (0, exports.IntentResultEventFilterSensitiveLog)(obj.IntentResultEvent) };
    if (obj.TextResponseEvent !== undefined)
        return { TextResponseEvent: (0, exports.TextResponseEventFilterSensitiveLog)(obj.TextResponseEvent) };
    if (obj.AudioResponseEvent !== undefined)
        return { AudioResponseEvent: obj.AudioResponseEvent };
    if (obj.HeartbeatEvent !== undefined)
        return { HeartbeatEvent: obj.HeartbeatEvent };
    if (obj.AccessDeniedException !== undefined)
        return { AccessDeniedException: obj.AccessDeniedException };
    if (obj.ResourceNotFoundException !== undefined)
        return { ResourceNotFoundException: obj.ResourceNotFoundException };
    if (obj.ValidationException !== undefined)
        return { ValidationException: obj.ValidationException };
    if (obj.ThrottlingException !== undefined)
        return { ThrottlingException: obj.ThrottlingException };
    if (obj.InternalServerException !== undefined)
        return { InternalServerException: obj.InternalServerException };
    if (obj.ConflictException !== undefined)
        return { ConflictException: obj.ConflictException };
    if (obj.DependencyFailedException !== undefined)
        return { DependencyFailedException: obj.DependencyFailedException };
    if (obj.BadGatewayException !== undefined)
        return { BadGatewayException: obj.BadGatewayException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.StartConversationResponseEventStreamFilterSensitiveLog = StartConversationResponseEventStreamFilterSensitiveLog;
const StartConversationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.responseEventStream && { responseEventStream: "STREAMING_CONTENT" }),
});
exports.StartConversationResponseFilterSensitiveLog = StartConversationResponseFilterSensitiveLog;
